datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String
  username       String        @unique
  role           Role          @default(USER)
  email          String?
  phone          String?
  hashedPassword String?
  shifts         Shift[]
  accounts       Account[]
  sessions       Session[]
  educational    Educational?  @relation(fields: [educationalId], references: [id])
  educationalId  String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Coordinate {
  id             String        @id @default(cuid())
  latitude       Float
  longitude      Float
  Educational    Educational?  @relation(fields: [educationalId], references: [id])
  educationalId  String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Shift {
  id             String  @id @default(cuid())
  date           String
  checkinTime    String
  checkoutTime   String?
  durationWorked String?
  breaksTaken    Int     @default(0)
  completed      Boolean @default(false)
  User           User?   @relation(fields: [userId], references: [id])
  userId         String?
  amountOutside  Int     @default(0)
  amountInside   Int     @default(0)
  amountChecked  Int     @default(0)
}

model Educational {
  id          String       @id @default(cuid())
  name        String       @unique
  coordinates Coordinate[]
  users       User[]
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @unique
  coordinates Coordinate[]
  users       User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ORGANIZATION
  ADMIN
  EDUCATIONAL
  TEACHER
  STUDENT
  EMPLOYEE
}
